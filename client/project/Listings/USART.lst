C51 COMPILER V9.01   USART                                                                 06/25/2019 09:02:08 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\USART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE USART.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\USA
                    -RT.lst) TABS(2) OBJECT(.\Objects\USART.obj)

line level    source

   1          
   2          #include "USART.h"
   3          
   4          
   5          COMx_Define COM1,COM2;
   6          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
   7          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
   8          u8  xdata TX2_Buffer[COM_TX2_Lenth];  //发送缓冲
   9          u8  xdata RX2_Buffer[COM_RX2_Lenth];  //接收缓冲
  10          
  11          /************函数功能：选择并配置串口属性********************
  12          *************输入参数：UARTX哪个串口和*COMx相关属性**********
  13          *************输出参数：无***********************************/
  14          u8 byte_change(u8 Data)
  15          {
  16   1        char i;
  17   1      unsigned char Data1;
  18   1      Data1 = Data;
  19   1      Data = 0x00;
  20   1      
  21   1      for(i = 0 ; i<(sizeof(char)*8/2) ; i++)
  22   1      {
  23   2      Data = Data | (Data1&(0X80>>i))>>(7-i*2);
  24   2      Data = Data | (Data1&(0X01<<i))<<(7-i*2);
  25   2      }
  26   1      
  27   1      return  Data;
  28   1      
  29   1        
  30   1      }
  31          
  32          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  33          {
  34   1        u8  i;
  35   1        u32 j;
  36   1        
  37   1        if(UARTx == USART1)
  38   1        {
  39   2          COM1.id = 1;
  40   2          COM1.TX_read    = 0;
  41   2          COM1.TX_write   = 0;
  42   2          COM1.B_TX_busy  = 0;
  43   2          COM1.RX_Cnt     = 0;
  44   2          COM1.RX_TimeOut = 0;
  45   2          COM1.B_RX_OK    = 0;
  46   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  47   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  48   2      
  49   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  50   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  51   2          else                  PS = 0; //低优先级中断
  52   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  53   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  54   2          {
C51 COMPILER V9.01   USART                                                                 06/25/2019 09:02:08 PAGE 2   

  55   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  56   3            if(j >= 65536UL)  return 2; //错误
  57   3            j = 65536UL - j;
  58   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  59   3            {
  60   4              TR1 = 0;
  61   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  62   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  63   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  64   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  65   4              TH1 = (u8)(j>>8);
  66   4              TL1 = (u8)j;
  67   4              ET1 = 0;  //禁止中断
  68   4              TMOD &= ~0x40;  //定时
  69   4              INT_CLKO &= ~0x02;  //不输出时钟
  70   4              TR1  = 1;
  71   4            }
  72   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  73   3            {
  74   4              AUXR &= ~(1<<4);  //Timer stop
  75   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  76   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  77   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  78   4              TH2 = (u8)(j>>8);
  79   4              TL2 = (u8)j;
  80   4              IE2  &= ~(1<<2);  //禁止中断
  81   4              AUXR &= ~(1<<3);  //定时
  82   4              AUXR |=  (1<<4);  //Timer run enable
  83   4            }
  84   3            else return 2;  //错误
  85   3          }
  86   2          else if(COMx->UART_Mode == UART_ShiftRight)
  87   2          {
  88   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  89   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  90   3          }
  91   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  92   2          {
  93   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  94   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  95   3          }
  96   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  97   2          else                ES = 0; //禁止中断
  98   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  99   2          else                REN = 0;  //禁止接收
 100   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
 101   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 102   2          else                  PCON2 &= ~(1<<4);
 103   2          return  0;
 104   2        }
 105   1      
 106   1        if(UARTx == USART2)
 107   1        {
 108   2          COM2.id = 2;
 109   2          COM2.TX_read    = 0;
 110   2          COM2.TX_write   = 0;
 111   2          COM2.B_TX_busy  = 0;
 112   2          COM2.RX_Cnt     = 0;
 113   2          COM2.RX_TimeOut = 0;
 114   2          COM2.B_RX_OK    = 0;
 115   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 116   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
C51 COMPILER V9.01   USART                                                                 06/25/2019 09:02:08 PAGE 3   

 117   2      
 118   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 119   2          {
 120   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 121   3            else                  IP2 &= ~1;  //低优先级中断
 122   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 123   3            else                  S2CON &= ~(1<<7); //8bit
 124   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 125   3            if(j >= 65536UL)  return 2; //错误
 126   3            j = 65536UL - j;
 127   3            AUXR &= ~(1<<4);  //Timer stop
 128   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
 129   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 130   3            TH2 = (u8)(j>>8);
 131   3            TL2 = (u8)j;
 132   3            IE2  &= ~(1<<2);  //禁止中断
 133   3            AUXR |=  (1<<4);  //Timer run enable
 134   3          }
 135   2          else  return 2; //模式错误
 136   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 137   2          else                IE2   &= ~1;    //禁止中断
 138   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 139   2          else                S2CON &= ~(1<<4); //禁止接收
 140   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO
 141   2        }
 142   1        return 0;
 143   1      }
 144          
 145          
 146          /*************** 装载串口发送缓冲 *******************************/
 147          
 148          /************函数功能：串口1发送字符dat**********************
 149          *************输入参数：dat***********************************
 150          *************输出参数：无***********************************/
 151          void TX1_writebuff(u8 dat)  //写入发送缓冲，指针+1
 152          {
 153   1        //dat = byte_change(dat);
 154   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 155   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 156   1      
 157   1        if(COM1.B_TX_busy == 0)   //空闲
 158   1        {  
 159   2          COM1.B_TX_busy = 1;   //标志忙
 160   2          TI = 1;         //触发发送中断
 161   2        }
 162   1      }
 163          
 164          /************函数功能：串口2发送字符dat**********************
 165          *************输入参数：dat***********************************
 166          *************输出参数：无***********************************/
 167          
 168          void TX2_writebuff(u8 dat)  //写入发送缓冲，指针+1
 169          {
 170   1        TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
 171   1        if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 172   1      
 173   1        if(COM2.B_TX_busy == 0)   //空闲
 174   1        {  
 175   2          COM2.B_TX_busy = 1;   //标志忙
 176   2          SET_TI2();        //触发发送中断
 177   2        }
 178   1      }
C51 COMPILER V9.01   USART                                                                 06/25/2019 09:02:08 PAGE 4   

 179          /************函数功能：串口1发送字符串**********************
 180          *************输入参数：*puts********************************
 181          *************输出参数：无***********************************/
 182          
 183          void PrintString1(u8 *puts)
 184          {
 185   1          for (; *puts != 0;  puts++)  TX1_writebuff(*puts);  //遇到停止符0结束
 186   1      }
 187          
 188          /************函数功能：串口2发送字符串**********************
 189          *************输入参数：*puts********************************
 190          *************输出参数：无***********************************/
 191          
 192          void PrintString2(u8 *puts)
 193          {
 194   1          for (; *puts != 0;  puts++)  TX2_writebuff(*puts);  //遇到停止符0结束
 195   1      }
 196          
 197          /************函数功能：串口1发送字符串，发送到cnt个停止*****
 198          *************输入参数：*puts，cnt***************************
 199          *************输出参数：无***********************************/
 200          
 201          void PrintString1_cnt(u8 *puts,u8 cnt)
 202          {
 203   1        u8 i;
 204   1        for(i = 0;i < cnt; i++,puts++)
 205   1          TX1_writebuff(*puts); 
 206   1      }
 207          
 208          /************函数功能：串口2发送字符串，发送到cnt个停止*****
 209          *************输入参数：*puts，cnt***************************
 210          *************输出参数：无***********************************/
 211          
 212          void PrintString2_cnt(u8 *puts,u8 cnt)
 213          {
 214   1        u8 i;
 215   1        for(i = 0;i < cnt; i++,puts++)
 216   1          TX2_writebuff(*puts); 
 217   1      }
 218          /*
 219          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 220          {
 221            if(COMx->id == 1) TX1_write2buff(dat);
 222            if(COMx->id == 2) TX2_write2buff(dat);
 223          }
 224          
 225          void PrintString(COMx_Define *COMx, u8 *puts)
 226          {
 227              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 228          }
 229          */
 230          
 231          
 232          /********************* UART1中断函数************************/
 233          void UART1_int (void) interrupt UART1_VECTOR
 234          {
 235   1        if(RI)
 236   1        {
 237   2          RI = 0;
 238   2          if(COM1.B_RX_OK == 0)
 239   2          {
 240   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
C51 COMPILER V9.01   USART                                                                 06/25/2019 09:02:08 PAGE 5   

 241   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 242   3            COM1.RX_TimeOut = TimeOutSet1;
 243   3            
 244   3          }
 245   2        }
 246   1      
 247   1        if(TI)
 248   1        {
 249   2          TI = 0;
 250   2          if(COM1.TX_read != COM1.TX_write)
 251   2          {
 252   3            SBUF = TX1_Buffer[COM1.TX_read];
 253   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 254   3          }
 255   2          else  COM1.B_TX_busy = 0;
 256   2        }
 257   1      }
 258          
 259          /********************* UART2中断函数************************/
 260          void UART2_int (void) interrupt UART2_VECTOR
 261          {
 262   1        if(RI2)
 263   1        {
 264   2          CLR_RI2();
 265   2          if(COM2.B_RX_OK == 0)
 266   2          {
 267   3            if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 268   3            RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 269   3            COM2.RX_TimeOut = TimeOutSet2;
 270   3            //TX1_writebuff(S2BUF);
 271   3          }
 272   2        }
 273   1      
 274   1        if(TI2)
 275   1        {
 276   2          CLR_TI2();
 277   2          if(COM2.TX_read != COM2.TX_write)
 278   2          {
 279   3            S2BUF = TX2_Buffer[COM2.TX_read];
 280   3            if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 281   3          }
 282   2          else  COM2.B_TX_busy = 0;
 283   2        }
 284   1      
 285   1      }
 286          /*****************初始化函数********************************/
 287          void config_UART()
 288          {
 289   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
 290   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,       UART_ShiftRight,UART_8bit_BRTx,UART_9b
             -it,UART_9bit_BRTx
 291   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //使用波特率,   BRT_Timer1, BRT_Timer2 (注意: 串口2固定
             -使用BRT_Timer2)
 292   1        COMx_InitStructure.UART_BaudRate  = 9600ul;     //波特率, 一般 110 ~ 115200
 293   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
 294   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
 295   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
 296   1        COMx_InitStructure.UART_Polity    = PolityLow;      //中断优先级, PolityLow,PolityHigh
 297   1        COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UAR
             -T1_SW_P16_P17(必须使用内部时钟)
 298   1        COMx_InitStructure.UART_RXD_TXD_Short = DISABLE;    //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 299   1        USART_Configuration(USART1, &COMx_InitStructure);   //初始化串口1 USART1,USART2
C51 COMPILER V9.01   USART                                                                 06/25/2019 09:02:08 PAGE 6   

 300   1        //串口2
 301   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,       UART_ShiftRight,UART_8bit_BRTx,UART_9b
             -it,UART_9bit_BRTx
 302   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //使用波特率,   BRT_Timer1, BRT_Timer2 (注意: 串口2固定
             -使用BRT_Timer2)
 303   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
 304   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
 305   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
 306   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
 307   1        COMx_InitStructure.UART_Polity    = PolityLow;      //中断优先级, PolityLow,PolityHigh
 308   1        COMx_InitStructure.UART_P_SW      = UART2_SW_P46_P47; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UAR
             -T1_SW_P16_P17(必须使用内部时钟)
 309   1        COMx_InitStructure.UART_RXD_TXD_Short = DISABLE;    //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 310   1        USART_Configuration(USART2, &COMx_InitStructure);
 311   1      }
 312          
 313          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    512    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
